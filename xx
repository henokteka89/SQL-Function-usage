--------------------------------------------------------------
-- 1) DECLARE your parameters (just for testing):
--------------------------------------------------------------
DECLARE @DynamicClientID INT = 274748; -- Example
DECLARE @UserID          INT = 47563;  -- Example

--------------------------------------------------------------
-- 2) Build the entire query with CTEs:
--------------------------------------------------------------
;WITH
--------------------------------------------------------------
-- 2.1) All real ClientIDs for this @DynamicClientID
--------------------------------------------------------------
DynamicClients AS
(
    SELECT ClientID
    FROM fn_DCG_GetClientIDsForDynamicClientID(@DynamicClientID)
),
--------------------------------------------------------------
-- 2.2) The random sections (1..10)
--------------------------------------------------------------
Sections AS
(
    SELECT
        randomsectionid,
        menutext,
        menuactionv2,
        [description]
    FROM randomsection WITH (NOLOCK)
    WHERE randomsectionid BETWEEN 1 AND 10
),
--------------------------------------------------------------
-- 2.3) CROSS JOIN: all (ClientID, RandomSectionID)
--------------------------------------------------------------
InputGrid AS
(
    SELECT
        dc.ClientID,
        s.randomsectionid,
        s.menutext,
        s.menuactionv2,
        s.[description]
    FROM DynamicClients dc
    CROSS JOIN Sections s
),
--------------------------------------------------------------
-- 2.4) User-level data (myescreenrandomusersectionsettings),
--      matched only by (UserID, RandomSectionID)
--------------------------------------------------------------
UserData AS
(
    SELECT
        ig.ClientID,
        @UserID AS UserID,
        ig.randomsectionid,
        ig.menutext,
        ig.menuactionv2,
        ig.[description],
        us.accessflag  AS UserAccessFlag,
        us.securityxml AS UserSecurityXML
    FROM InputGrid ig
    LEFT JOIN myescreenrandomusersectionsettings us
        ON us.UserID          = @UserID
       AND us.RandomSectionID = ig.RandomSectionID
),
--------------------------------------------------------------
-- 2.5) Identify each ClientIDâ€™s Type (0,1,2),
--      plus MasterID, GroupID
--------------------------------------------------------------
ClientType AS
(
    SELECT
        ca.clientid,
        ca.clientaccount,
        ca.clientsubaccount,
        ne.groupid,
        m.clientid AS MasterID,
        CASE
          WHEN ca.clientsubaccount <> 0 THEN 0  -- subaccount
          WHEN ne.groupid = ca.clientid THEN 2  -- group
          ELSE 1                                -- master
        END AS ClientTypeID
    FROM clientaccounts ca
    LEFT JOIN nationalaccountextras ne
        ON ne.clientid = ca.clientid
    LEFT JOIN clientaccounts m
        ON m.clientaccount    = ca.clientaccount
       AND m.clientsubaccount = 0
),
--------------------------------------------------------------
-- 2.6) Client-level data (myescreenrandomclientsectionsettings)
--------------------------------------------------------------
ClientRandom AS
(
    SELECT
        crs.clientid,
        crs.clienttypeid,
        crs.randomsectionid,
        crs.accessflag,
        crs.securityxml
    FROM myescreenrandomclientsectionsettings crs WITH (NOLOCK)
),
--------------------------------------------------------------
-- 2.7) AllData: join everything
--------------------------------------------------------------
AllData AS
(
    SELECT
        ud.ClientID,
        ud.UserID,
        ud.RandomSectionID,
        ud.UserAccessFlag,
        ud.UserSecurityXML,
        ct.ClientTypeID,
        ct.MasterID,
        ct.groupid,

        ud.menutext,
        ud.menuactionv2,
        ud.[description],

        -- For group=2
        c2.accessflag    AS c2Access,
        c2.securityxml   AS c2XML,

        -- For master=1 + group row
        c1.accessflag    AS c1Access,
        c1.securityxml   AS c1XML,
        cG1.accessflag   AS cG1Access,
        cG1.securityxml  AS cG1XML,

        -- For subaccount=0 + master + group
        c0.accessflag    AS c0Access,
        c0.securityxml   AS c0XML,
        cM0.accessflag   AS cM0Access,
        cM0.securityxml  AS cM0XML,
        cG0.accessflag   AS cG0Access,
        cG0.securityxml  AS cG0XML
    FROM UserData ud
    INNER JOIN ClientType ct
        ON ct.clientid = ud.ClientID

    LEFT JOIN ClientRandom c2
        ON c2.clientid       = ud.ClientID
       AND c2.clienttypeid   = 2
       AND c2.randomsectionid= ud.RandomSectionID

    LEFT JOIN ClientRandom c1
        ON c1.clientid       = ud.ClientID
       AND c1.clienttypeid   = 1
       AND c1.randomsectionid= ud.RandomSectionID

    LEFT JOIN ClientRandom cG1
        ON cG1.clientid       = ct.groupid
       AND cG1.clienttypeid   = 1
       AND cG1.randomsectionid= ud.RandomSectionID

    LEFT JOIN ClientRandom c0
        ON c0.clientid       = ud.ClientID
       AND c0.clienttypeid   = 0
       AND c0.randomsectionid= ud.RandomSectionID

    LEFT JOIN ClientRandom cM0
        ON cM0.clientid       = ct.MasterID
       AND cM0.clienttypeid   = 0
       AND cM0.randomsectionid= ud.RandomSectionID

    LEFT JOIN ClientRandom cG0
        ON cG0.clientid       = ct.groupid
       AND cG0.clienttypeid   = 0
       AND cG0.randomsectionid= ud.RandomSectionID
),
--------------------------------------------------------------
-- 2.8) FinalCalc: replicate each "IF ... RETURN" as nested CASE
--      Also replicate "Nothing found => Avail=0, SecurityXML=NULL, RETURN"
--------------------------------------------------------------
FinalCalc AS
(
    SELECT
        ad.ClientID,
        ad.UserID,
        ad.RandomSectionID,

        ------------------------------------------------
        -- AVAIL with "short-circuit" nesting
        ------------------------------------------------
        CASE 
          -- 1) If user=0 => Avail=0
          WHEN ad.UserAccessFlag=0
               THEN 0

          -- else check clientType
          ELSE
              CASE ad.ClientTypeID
                WHEN 2 -- group
                  THEN
                    CASE
                      -- if c2=0 or null => Avail=0 => return
                      WHEN ad.c2Access IS NULL OR ad.c2Access=0 
                           THEN 0
                      -- else => Avail=1 => return
                      ELSE 1
                    END

                WHEN 1 -- master => check c1 => else cG1
                  THEN
                    CASE
                      WHEN ad.c1Access IS NULL OR ad.c1Access=0
                           THEN 0
                      WHEN ad.c1Access=1 AND ad.UserAccessFlag=1
                           THEN 1
                      ELSE
                          CASE
                            WHEN ad.cG1Access IS NULL OR ad.cG1Access=0
                                 THEN 0
                            WHEN ad.cG1Access=1 AND ad.UserAccessFlag=1
                                 THEN 1
                            ELSE 0
                          END
                    END

                WHEN 0 -- subaccount => c0 => else cM0 => else cG0
                  THEN
                    CASE
                      WHEN ad.c0Access IS NULL OR ad.c0Access=0
                           THEN 0
                      WHEN ad.c0Access=1 AND ad.UserAccessFlag=1
                           THEN 1
                      ELSE
                          CASE
                            WHEN ad.cM0Access IS NULL OR ad.cM0Access=0
                                 THEN 0
                            WHEN ad.cM0Access=1 AND ad.UserAccessFlag=1
                                 THEN 1
                            ELSE
                                CASE
                                  WHEN ad.cG0Access IS NULL OR ad.cG0Access=0
                                       THEN 0
                                  WHEN ad.cG0Access=1 AND ad.UserAccessFlag=1
                                       THEN 1
                                  ELSE 0
                                END
                          END
                    END

                ELSE 0
              END
        END 
        AS FinalAvail,

        ------------------------------------------------
        -- SECURITYXML with each step
        ------------------------------------------------
        CASE
          -- 1) If user=0 => Avail=0 => set userSec => return
          WHEN ad.UserAccessFlag=0
               THEN ad.UserSecurityXML

          -- 2) If userSec is not null => keep it => return
          WHEN ad.UserSecurityXML IS NOT NULL
               THEN ad.UserSecurityXML

          -- 3) else check clientType...
          ELSE
            CASE ad.ClientTypeID
              WHEN 2
                THEN
                  -- group => if c2=0 => Avail=0 => 
                  CASE
                    WHEN ad.c2Access IS NULL OR ad.c2Access=0
                         THEN 
                           CASE 
                             WHEN ad.UserSecurityXML IS NULL AND ad.c2XML IS NOT NULL
                                  THEN ad.c2XML
                             ELSE NULL
                           END
                    ELSE
                      /* c2=1 => Avail=1 => if userSec=null => set c2 */
                      CASE
                        WHEN ad.UserSecurityXML IS NULL AND ad.c2XML IS NOT NULL
                             THEN ad.c2XML
                        ELSE NULL
                      END
                  END

              WHEN 1
                THEN
                  /* type=1 => c1 => else cG1 */
                  CASE
                    WHEN ad.c1Access IS NULL OR ad.c1Access=0
                         THEN
                           CASE
                             WHEN ad.UserSecurityXML IS NULL AND ad.c1XML IS NOT NULL
                                  THEN ad.c1XML
                             ELSE NULL
                           END
                    WHEN ad.c1Access=1 AND ad.UserAccessFlag=1
                         THEN
                           CASE
                             WHEN ad.UserSecurityXML IS NULL AND ad.c1XML IS NOT NULL
                                  THEN ad.c1XML
                             ELSE NULL
                           END
                    ELSE
                      -- check cG1
                      CASE
                        WHEN ad.cG1Access IS NULL OR ad.cG1Access=0
                             THEN
                               CASE
                                 WHEN ad.UserSecurityXML IS NULL AND ad.cG1XML IS NOT NULL
                                      THEN ad.cG1XML
                                 ELSE NULL
                               END
                        WHEN ad.cG1Access=1 AND ad.UserAccessFlag=1
                             THEN
                               CASE
                                 WHEN ad.UserSecurityXML IS NULL AND ad.cG1XML IS NOT NULL
                                      THEN ad.cG1XML
                                 ELSE NULL
                               END
                        ELSE NULL
                      END
                  END

              WHEN 0
                THEN
                  /* subaccount => c0 => else cM0 => else cG0 */
                  CASE
                    WHEN ad.c0Access IS NULL OR ad.c0Access=0
                         THEN
                           CASE
                             WHEN ad.UserSecurityXML IS NULL AND ad.c0XML IS NOT NULL
                                  THEN ad.c0XML
                             ELSE NULL
                           END
                    WHEN ad.c0Access=1 AND ad.UserAccessFlag=1
                         THEN
                           CASE
                             WHEN ad.UserSecurityXML IS NULL AND ad.c0XML IS NOT NULL
                                  THEN ad.c0XML
                             ELSE NULL
                           END
                    ELSE
                      CASE
                        WHEN ad.cM0Access IS NULL OR ad.cM0Access=0
                             THEN
                               CASE
                                 WHEN ad.UserSecurityXML IS NULL AND ad.cM0XML IS NOT NULL
                                      THEN ad.cM0XML
                                 ELSE NULL
                               END
                        WHEN ad.cM0Access=1 AND ad.UserAccessFlag=1
                             THEN
                               CASE
                                 WHEN ad.UserSecurityXML IS NULL AND ad.cM0XML IS NOT NULL
                                      THEN ad.cM0XML
                                 ELSE NULL
                               END
                        ELSE
                          CASE
                            WHEN ad.cG0Access IS NULL OR ad.cG0Access=0
                                 THEN
                                   CASE
                                     WHEN ad.UserSecurityXML IS NULL AND ad.cG0XML IS NOT NULL
                                          THEN ad.cG0XML
                                     ELSE NULL
                                   END
                            WHEN ad.cG0Access=1 AND ad.UserAccessFlag=1
                                 THEN
                                   CASE
                                     WHEN ad.UserSecurityXML IS NULL AND ad.cG0XML IS NOT NULL
                                          THEN ad.cG0XML
                                     ELSE NULL
                                   END
                            ELSE NULL
                          END
                      END
                  END

              ELSE NULL
            END
        END 
        AS FinalSecurityXML,

        ad.menutext,
        ad.menuactionv2,
        ad.[description]
    FROM AllData ad
),
--------------------------------------------------------------
-- 2.9) If "Nothing found => set Avail=0, SecurityXML=NULL"
--      We do that if the entire nested logic above 
--      ended up with NULL or 0? Actually, the code above 
--      always produces 0 or 1 for Avail. 
--      But let's ensure if it's somehow NULL => force 0 & NULL. 
--------------------------------------------------------------
FallbackFix AS
(
    SELECT
        fc.ClientID,
        fc.UserID,
        fc.RandomSectionID,

        CASE
          WHEN fc.FinalAvail IS NULL
               THEN 0
          ELSE fc.FinalAvail
        END AS FinalAvail,

        /* 
           If the code never assigned XML, we keep it as is 
           (which might be NULL).
        */
        fc.FinalSecurityXML AS FinalSecurityXML,

        fc.menutext,
        fc.menuactionv2,
        fc.[description]
    FROM FinalCalc fc
),
--------------------------------------------------------------
-- 2.10) Summarize if the old code says "If ANY client=1 => overall=1"
--------------------------------------------------------------
AggResult AS
(
    SELECT
        ff.RandomSectionID,
        CAST(MAX(ff.FinalAvail) AS BIT) AS UserAvail,
        MAX(ff.FinalSecurityXML) AS SecurityXML,
        MAX(ff.menutext) AS menutext,
        MAX(ff.menuactionv2) AS menuactionv2,
        MAX(ff.[description]) AS [description]
    FROM FallbackFix ff
    GROUP BY ff.RandomSectionID
)

--------------------------------------------------------------
-- 3) Final SELECT
--------------------------------------------------------------
SELECT
    a.UserAvail        AS UserAvail,
    a.SecurityXML      AS SecurityXML,
    a.menutext         AS menutext,
    a.menuactionv2     AS menuactionv2,
    a.RandomSectionID  AS RandomSectionID,
    a.[description]    AS [description]
FROM AggResult a
ORDER BY a.RandomSectionID;