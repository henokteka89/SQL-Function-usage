---------------------------------------------------------
-- 1) DECLARE the parameters (for testing):
---------------------------------------------------------
DECLARE @DynamicClientID INT = 274748; -- Example
DECLARE @UserID          INT = 47563;  -- Example

---------------------------------------------------------
-- 2) Start the CTE chain to gather, join, and compute
---------------------------------------------------------
;WITH 
---------------------------------------------------------
-- 2.1) Get all real ClientIDs from your dynamic client ID
---------------------------------------------------------
DynamicClients AS
(
    SELECT ClientID
    FROM fn_DCG_GetClientIDsForDynamicClientID(@DynamicClientID)
),
---------------------------------------------------------
-- 2.2) The random sections we care about (1..10)
---------------------------------------------------------
Sections AS
(
    SELECT 
        randomsectionid,
        menutext,
        menuactionv2,
        [description]
    FROM randomsection WITH (NOLOCK)
    WHERE randomsectionid BETWEEN 1 AND 10
),
---------------------------------------------------------
-- 2.3) Cross-join all (ClientID, RandomSectionID) combos
---------------------------------------------------------
InputGrid AS
(
    SELECT 
       dc.ClientID,
       s.randomsectionid,
       s.menutext,
       s.menuactionv2,
       s.[description]
    FROM DynamicClients dc
    CROSS JOIN Sections s
),
---------------------------------------------------------
-- 2.4) Join the user-level table (myescreenrandomusersectionsettings)
--      which does NOT have clientid. We match only on (UserID, randomsectionid)
---------------------------------------------------------
UserData AS
(
    SELECT
        ig.ClientID,         -- from cross-join
        @UserID AS UserID,   -- a single user
        ig.randomsectionid,
        ig.menutext,
        ig.menuactionv2,
        ig.[description],

        -- If there's no row for (UserID, randomsectionid), these become NULL:
        us.accessflag  AS UserAccessFlag,
        us.SecurityXML AS UserSecurityXML
    FROM
        InputGrid ig
        LEFT JOIN myescreenrandomusersectionsettings us
               ON us.UserID          = @UserID
              AND us.randomsectionid = ig.randomsectionid
),
---------------------------------------------------------
-- 2.5) Identify each client as subaccount=0, master=1, or group=2
--      plus find the MasterID and GroupID
---------------------------------------------------------
ClientType AS
(
    SELECT
        ca.clientid,
        ca.clientaccount,
        ca.clientsubaccount,
        ne.groupid,
        m.clientid AS MasterID,
        CASE 
          WHEN ca.clientsubaccount <> 0 THEN 0  -- subaccount
          WHEN ne.groupid = ca.clientid THEN 2  -- group
          ELSE 1                                -- master
        END AS ClientTypeID
    FROM clientaccounts ca
    LEFT JOIN nationalaccountextras ne 
           ON ne.clientid = ca.clientid
    LEFT JOIN clientaccounts m
           ON m.clientaccount    = ca.clientaccount
          AND m.clientsubaccount = 0
),
---------------------------------------------------------
-- 2.6) Reference table: myescreenrandomclientsectionsettings
--      (client-level access info)
---------------------------------------------------------
ClientRandom AS
(
    SELECT
        crs.clientid,
        crs.clienttypeid,
        crs.randomsectionid,
        crs.accessflag,
        crs.securityxml
    FROM myescreenrandomclientsectionsettings crs WITH (NOLOCK)
),
---------------------------------------------------------
-- 2.7) "AllData": Join them all together in one row
--      so we can replicate the multi-layer logic
---------------------------------------------------------
AllData AS
(
    SELECT
        ud.ClientID,
        ud.UserID,
        ud.RandomSectionID,
        ud.UserAccessFlag,
        ud.UserSecurityXML,

        ct.ClientTypeID,
        ct.MasterID,
        ct.groupid,

        ud.menutext,
        ud.menuactionv2,
        ud.[description],

        -- For clienttype=2 (group) record:
        c2.accessflag    AS c2Access,
        c2.securityxml   AS c2XML,

        -- For clienttype=1 (master) record:
        c1.accessflag    AS c1Access,
        c1.securityxml   AS c1XML,
        cG1.accessflag   AS cG1Access,
        cG1.securityxml  AS cG1XML,

        -- For clienttype=0 (subaccount) record:
        c0.accessflag    AS c0Access,
        c0.securityxml   AS c0XML,
        cM0.accessflag   AS cM0Access,
        cM0.securityxml  AS cM0XML,
        cG0.accessflag   AS cG0Access,
        cG0.securityxml  AS cG0XML
    FROM UserData ud
    INNER JOIN ClientType ct
         ON ct.clientid = ud.ClientID

    -- =========== For type=2 (group) row =============
    LEFT JOIN ClientRandom c2
           ON c2.clientid       = ud.ClientID
          AND c2.clienttypeid   = 2
          AND c2.randomsectionid= ud.RandomSectionID

    -- =========== For type=1 (master) row =============
    LEFT JOIN ClientRandom c1
           ON c1.clientid       = ud.ClientID
          AND c1.clienttypeid   = 1
          AND c1.randomsectionid= ud.RandomSectionID

    -- Also check the group's row for type=1
    LEFT JOIN ClientRandom cG1
           ON cG1.clientid       = ct.groupid
          AND cG1.clienttypeid   = 1
          AND cG1.randomsectionid= ud.RandomSectionID

    -- =========== For type=0 (subaccount) row ===========
    LEFT JOIN ClientRandom c0
           ON c0.clientid       = ud.ClientID
          AND c0.clienttypeid   = 0
          AND c0.randomsectionid= ud.RandomSectionID

    LEFT JOIN ClientRandom cM0
           ON cM0.clientid       = ct.MasterID
          AND cM0.clienttypeid   = 0
          AND cM0.randomsectionid= ud.RandomSectionID

    LEFT JOIN ClientRandom cG0
           ON cG0.clientid       = ct.groupid
          AND cG0.clienttypeid   = 0
          AND cG0.randomsectionid= ud.RandomSectionID
),
---------------------------------------------------------
-- 2.8) "FinalCalc": Replicate the old procedure's logic
--      to compute Avail and SecurityXML for each row
---------------------------------------------------------
FinalCalc AS
(
    SELECT
        ad.ClientID,
        ad.UserID,
        ad.RandomSectionID,

        ------------------------------------------------
        -- Compute final "Avail" using nested CASE logic
        -- to mimic web_Intranet_MyeMgmt_UserRandomSectionAvail
        ------------------------------------------------
        FinalAvail =
            CASE
                -- 1) If user's own accessflag=0 => short-circuit => Avail=0
                WHEN ad.UserAccessFlag = 0 
                     THEN 0
                ELSE
                    -- 2) Then check client type
                    CASE ad.ClientTypeID
                        WHEN 2 THEN
                            -- group => c2 access
                            CASE
                              WHEN ad.c2Access IS NULL OR ad.c2Access=0 THEN 0
                              ELSE 1
                            END

                        WHEN 1 THEN
                            -- master => check (clientid,1), then group(1)
                            CASE
                              WHEN ad.c1Access=0 THEN 0
                              WHEN ad.c1Access=1 AND ad.UserAccessFlag=1 THEN 1
                              ELSE
                                CASE
                                  WHEN ad.cG1Access=0 THEN 0
                                  WHEN ad.cG1Access=1 AND ad.UserAccessFlag=1 THEN 1
                                  ELSE 0
                                END
                            END

                        WHEN 0 THEN
                            -- subaccount => check (clientid,0), then (masterid,0), then (groupid,0)
                            CASE
                              WHEN ad.c0Access=0 THEN 0
                              WHEN ad.c0Access=1 AND ad.UserAccessFlag=1 THEN 1
                              ELSE
                                CASE
                                  WHEN ad.cM0Access=0 THEN 0
                                  WHEN ad.cM0Access=1 AND ad.UserAccessFlag=1 THEN 1
                                  ELSE
                                    CASE
                                      WHEN ad.cG0Access=0 THEN 0
                                      WHEN ad.cG0Access=1 AND ad.UserAccessFlag=1 THEN 1
                                      ELSE 0
                                    END
                                END
                            END

                        ELSE 0
                    END
            END
        AS FinalAvail,

        ------------------------------------------------
        -- Compute final "SecurityXML"
        -- The old SP sets it if user=0 => user XML 
        -- or if user has XML => user XML,
        -- else pick from whichever client row "triggered".
        ------------------------------------------------
        FinalSecurityXML =
            CASE
                -- If user=0 => we always do Avail=0 and user XML
                WHEN ad.UserAccessFlag=0 
                     THEN ad.UserSecurityXML

                -- If user has its own XML => use it
                WHEN ad.UserSecurityXML IS NOT NULL
                     THEN ad.UserSecurityXML

                ELSE
                    -- else pick from the relevant client row(s) 
                    CASE ad.ClientTypeID
                        WHEN 2 THEN
                            -- group => c2 row 
                            ad.c2XML

                        WHEN 1 THEN
                            -- master => check c1 or cG1
                            CASE
                              WHEN ad.c1Access=0 THEN ad.c1XML
                              WHEN ad.c1Access=1 AND ad.UserAccessFlag=1 THEN ad.c1XML
                              ELSE ad.cG1XML
                            END

                        WHEN 0 THEN
                            -- subaccount => c0, then cM0, then cG0
                            CASE
                              WHEN ad.c0Access=0 THEN ad.c0XML
                              WHEN ad.c0Access=1 AND ad.UserAccessFlag=1 THEN ad.c0XML
                              ELSE
                                CASE
                                  WHEN ad.cM0Access=0 THEN ad.cM0XML
                                  WHEN ad.cM0Access=1 AND ad.UserAccessFlag=1 THEN ad.cM0XML
                                  ELSE ad.cG0XML
                                END
                            END

                        ELSE NULL
                    END
            END
            AS FinalSecurityXML,

        ad.menutext,
        ad.menuactionv2,
        ad.[description]
    FROM AllData ad
),
---------------------------------------------------------
-- 2.9) Aggregate across all ClientIDs if the old code 
--      sets "UserSectionXAvail=1" whenever ANY client is on.
---------------------------------------------------------
AggResult AS
(
    SELECT
        fc.RandomSectionID,
        -- if any row is 1, we set overall to 1
        CAST(MAX(fc.FinalAvail) AS BIT) AS UserAvail,

        -- For SecurityXML, some code might want the "first non-null"
        -- but for simplicity we'll do MAX(...) in string sense. 
        -- Or pick whichever approach is desired.
        MAX(fc.FinalSecurityXML) AS SecurityXML,

        MAX(fc.menutext)      AS menutext,
        MAX(fc.menuactionv2)  AS menuactionv2,
        MAX(fc.[description]) AS [description]
    FROM FinalCalc fc
    GROUP BY 
        fc.RandomSectionID
)

---------------------------------------------------------
-- 3) SELECT final rows (like your old proc does)
---------------------------------------------------------
SELECT 
    a.UserAvail         AS UserAvail,
    a.SecurityXML       AS SecurityXML,
    a.menutext          AS menutext,
    a.menuactionv2      AS menuactionv2,
    a.RandomSectionID   AS RandomSectionID,
    a.[description]     AS [description]
FROM AggResult a
ORDER BY a.RandomSectionID;